rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user has team access
    function hasTeamAccess(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.teamId != null;
    }
    
    // Helper function to check if user is board owner
    function isBoardOwner(boardId, userId) {
      return get(/databases/$(database)/documents/boards/$(boardId)).data.userId == userId;
    }
    
    // Helper function to check if user has edit permission on board
    function hasEditPermission(boardId, userId) {
      return isBoardOwner(boardId, userId) ||
             (exists(/databases/$(database)/documents/boardCollaborators/$(boardId + '_' + userId)) &&
              get(/databases/$(database)/documents/boardCollaborators/$(boardId + '_' + userId)).data.permission == 'edit' &&
              hasTeamAccess(get(/databases/$(database)/documents/boards/$(boardId)).data.userId));
    }
    
    // Helper function to check if user has view permission on board
    function hasViewPermission(boardId, userId) {
      let board = get(/databases/$(database)/documents/boards/$(boardId)).data;
      return isBoardOwner(boardId, userId) ||
             board.isPublic == true ||
             exists(/databases/$(database)/documents/boardCollaborators/$(boardId + '_' + userId));
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Boards collection
    match /boards/{boardId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || 
                      resource.data.isPublic == true ||
                      hasViewPermission(boardId, request.auth.uid));
      
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId;
      
      allow update: if request.auth != null && 
                       (isBoardOwner(boardId, request.auth.uid) ||
                        hasEditPermission(boardId, request.auth.uid));
      
      allow delete: if request.auth != null && 
                       isBoardOwner(boardId, request.auth.uid);
    }
    
    // Board collaborators collection
    match /boardCollaborators/{collaboratorId} {
      allow read: if request.auth != null;
      
      // Only board owner can add collaborators
      // Only team members can add collaborators with edit permission
      allow create: if request.auth != null && 
                       isBoardOwner(resource.data.boardId, request.auth.uid) &&
                       (request.resource.data.permission == 'view' || 
                        (request.resource.data.permission == 'edit' && hasTeamAccess(request.auth.uid)));
      
      allow update: if request.auth != null && 
                       isBoardOwner(resource.data.boardId, request.auth.uid) &&
                       (request.resource.data.permission == 'view' || 
                        (request.resource.data.permission == 'edit' && hasTeamAccess(request.auth.uid)));
      
      allow delete: if request.auth != null && 
                       (isBoardOwner(resource.data.boardId, request.auth.uid) ||
                        resource.data.userId == request.auth.uid);
    }
    
    // Board invitations collection
    match /boardInvitations/{invitationId} {
      allow read: if request.auth != null &&
                     (resource.data.invitedBy == request.auth.uid ||
                      resource.data.email == request.auth.email);
      
      // Only board owner can create invitations
      // Only team members can create invitations with edit permission
      allow create: if request.auth != null && 
                       isBoardOwner(request.resource.data.boardId, request.auth.uid) &&
                       (request.resource.data.permission == 'view' || 
                        (request.resource.data.permission == 'edit' && hasTeamAccess(request.auth.uid)));
      
      allow update: if request.auth != null && 
                       (resource.data.invitedBy == request.auth.uid ||
                        resource.data.email == request.auth.email);
      
      allow delete: if request.auth != null && 
                       resource.data.invitedBy == request.auth.uid;
    }
    
    // Teams collection
    match /teams/{teamId} {
      allow read: if request.auth != null && 
                     request.auth.uid in resource.data.members.map(m => m.userId);
      
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.ownerId &&
                       request.auth.uid in request.resource.data.members.map(m => m.userId);
      
      allow update: if request.auth != null && 
                       request.auth.uid in resource.data.members.map(m => m.userId) &&
                       (resource.data.ownerId == request.auth.uid ||
                        resource.data.members[resource.data.members.map(m => m.userId).indexOf(request.auth.uid)].role in ['owner', 'admin']);
      
      allow delete: if request.auth != null && 
                       resource.data.ownerId == request.auth.uid;
    }
    
    // Team invitations collection
    match /teamInvitations/{invitationId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
                       exists(/databases/$(database)/documents/teams/$(request.resource.data.teamId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.members.map(m => m.userId);
      
      allow update: if request.auth != null;
      
      allow delete: if request.auth != null && 
                       resource.data.inviterId == request.auth.uid;
    }
    
    // Support tickets collection
    match /support_tickets/{ticketId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.userId ||
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId;
      
      allow update: if request.auth != null && 
                       (request.auth.uid == resource.data.userId ||
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      
      allow delete: if false; // Support tickets should not be deleted
    }
    
    // Block-specific collections (saved blocks, etc)
    match /savedBlocks/{blockId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.userId ||
                      resource.data.isPublic == true);
      
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId;
      
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.userId;
      
      allow delete: if request.auth != null && 
                       request.auth.uid == resource.data.userId;
    }
    
    // Public profiles
    match /profiles/{username} {
      allow read: if true; // Public profiles are readable by everyone
      allow write: if request.auth != null && 
                      request.auth.uid == resource.data.userId;
    }
  }
}